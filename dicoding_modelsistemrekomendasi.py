# -*- coding: utf-8 -*-
"""Dicoding-ModelSistemRekomendasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yW-J5dYxSP7UT4GPer3H4sHz0FgWAAJU

Proyek Akhir : Membuat Model Sistem Rekomendasi - Muhammad Abiya Makruf

#Data Understanding

Melakukan import library yang dibutuhkan untuk keseluruhan proyek.
"""

#Import library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from pathlib import Path

"""Melakukan download dataset yang sudah di upload ke repository github pribadi.

*Dataset diambil dari https://www.kaggle.com/datasets/meirnizri/cellphones-recommendations/data*
"""

#Download dataset
!wget https://raw.githubusercontent.com/AbiyaMakruf/Dicoding-ModelSistemRekomendasi/main/dataset/dataset.zip

"""Karena dataset yang didownload dalam bentuk zip maka harus dilakukan unzip."""

#Unzip dataset
!unzip dataset.zip

"""Mengubah nama file agar lebih mudah ketika digunakan.
- cellphones data.csv -> data.csv
- cellphones rating.csv -> rating.csv
- cellphones users.csv -> users.csv
"""

#Mengubah nama file
!mv '/content/cellphones data.csv' 'data.csv'
!mv '/content/cellphones ratings.csv' 'rating.csv'
!mv '/content/cellphones users.csv' 'users.csv'

#Menghapus file zip
!rm dataset.zip

"""Output kode di atas memberikan informasi :

Dataset memiliki 3 file .csv yaitu
- cellphones data.csv : Berisikan tentang data cellphone seperti nama brand, nama cellphone, OS, dll.
- cellphones rating.csv : Berisikan tentang cellphone dan rating yang diberikan user terhadap cellphone tersebut.
- cellphones users.csv : Berisikan tentang identitas dari user seperti age, gender, dan occupation.

Membaca file .csv dan menyimpannya pada suatu variabel.
"""

#Membaca dataset
data = pd.read_csv('data.csv')
rating = pd.read_csv('rating.csv')
users = pd.read_csv('users.csv')

"""Menampilkan informasi dari dataset menggunakan .info()"""

#Menampilkan info dari dataset
data.info()

"""Output kode di atas memberikan informasi :
- Total baris ada 33
- Total kolom ada 14
- Terdapat 10 kolom bertipe data numerik
- Terdapat 4 kolom bertipe data object

Menampilkan 5 sampel teratas dari varibel data.
"""

#Menampilkan isi dari variabel data
data.head()

"""Menampilkan informasi dari dataset menggunakan .info()"""

#Menampilkan info dari dataset
rating.info()

"""Output kode di atas memberikan informasi :
- Total baris ada 990
- Total kolom ada 3
- Terdapat 3 kolom bertipe data numerik

Menampilkan 5 sampel teratas dari varibel rating.
"""

#Menampilkan isi dari variabel rating
rating.head()

"""Menampilkan informasi dari dataset menggunakan .info()"""

#Menampilkan info dari dataset
users.info()

"""Output kode di atas memberikan informasi :
- Total baris ada 99
- Total kolom ada 4
- Terdapat 2 kolom bertipe data numerik
- Terdapat 2 kolom bertipe data object

Menampilkan 5 sampel teratas dari varibel users.
"""

#Menampilkan isi dari variabel users
users.head()

"""#Univariate Exploratory Data Analysis

Tentu, berikut adalah daftar variabel-variabel pada dataset yang telah diubah sesuai permintaan Anda:

- data:
  - `cellphone_id`: ID unik untuk setiap ponsel.
  - `brand`: Merek ponsel.
  - `model`: Model ponsel.
  - `operating system`: Sistem operasi ponsel.
  - `internal memory`: Memori internal ponsel dalam GB.
  - `RAM`: RAM ponsel dalam GB.
  - `performance`: Skor kinerja ponsel.
  - `main camera`: Resolusi kamera utama dalam MP.
  - `selfie camera`: Resolusi kamera depan dalam MP.
  - `battery size`: Kapasitas baterai dalam mAh.
  - `screen size`: Ukuran layar dalam inci.
  - `weight`: Berat ponsel dalam gram.
  - `price`: Harga ponsel dalam USD.
  - `release date`: Tanggal rilis ponsel.

- rating:
  - `user_id`: ID unik untuk setiap pengguna.
  - `cellphone_id`: ID unik untuk setiap ponsel (mengacu pada cellphones_data).
  - `rating`: Rating yang diberikan pengguna untuk ponsel tertentu (skala 1-10).

- user:
  - `user_id`: ID unik untuk setiap pengguna.
  - `age`: Usia pengguna.
  - `gender`: Jenis kelamin pengguna.
  - `occupation`: Pekerjaan pengguna.

**Dataset Data**

Menampilkan satu contoh dari dataset data
"""

#Menampilkan satu contoh
data.head(1)

"""Menghitung jumlah cellphone masing-masing brand dan menampilkan grafik."""

#Menghitung jumlah brand
print('Jumlah brand: ',len(data.brand.unique()))

#Menghitung jumlah cellphone masing-masing brand
brand_counts = data['brand'].value_counts()
print(brand_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=data, x=data['brand'])
plt.xticks(rotation=90)
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat 10 brand berbeda
- Brand dengan jumlah cellphone paling banyak adalah Samsung
- Brand dengan jumlah cellphone paling sedikit adalah Asus, Oppo, Vivo, dan Sony

Menampilkan jenis-jenis model cellphone.
"""

#Menampilkan semua model cellphone
model_counts = data['model'].unique()
print('Jumlah model cellphone: ',len(model_counts))
model_counts

"""Output kode di atas memberikan informasi :
- Terdapat 33 model cellphone berbeda

Menghitung jumlah operating system untuk masing-masing kategori.
"""

#Menghitung jumlah operating system
os_counts = data['operating system'].value_counts()
print(os_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=data, x=data['operating system'])
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat dua kategori operating system
- Android memiliki jumlah terbanyak dengan total 27

Menghitung jumlah internal memory untuk masing-masing kategori.
"""

#Menghitung jumlah internal memory
internalMemory_counts = data['internal memory'].value_counts()
print(internalMemory_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=data, x=data['internal memory'])
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat lima kategori internal memory
- Kategori internal memory 128 memiliki jumlah terbanyak dengan total 20
- Kategori internal memory 512 memiliki jumlah tersedikit dengan total 1

Menghitung jumlah RAM untuk masing-masing kategori.
"""

#Menghitung jumlah RAM
RAM_counts = data['RAM'].value_counts()
print(RAM_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=data, x=data['RAM'])
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat lima kategori RAM
- Kategori RAM 8 memiliki jumlah terbanyak dengan total 13
- Kategori RAM 3 dan RAM 12 memiliki jumlah tersedikit dengan total 4

Menampilkan analisis untuk kolom performance. Analisis dilakukan dengan membagi performance menjadi dua kategori karena nilai yang dimiliki sangat beragam.
"""

#Filter data berdasarkan performance
performance_above_5 = data[data['performance'] > 5]
performance_below_5 = data[data['performance'] <= 5]

#Menghitung total untuk setiap kategori
total_above_5 = len(performance_above_5)
total_below_5 = len(performance_below_5)

print('Total data dengan performance > 5:', total_above_5)
print('Total data dengan performance <= 5:', total_below_5)

#Data untuk plotting
performance_data = pd.DataFrame({
    'Category': ['Performance > 5', 'Performance <= 5'],
    'Total': [total_above_5, total_below_5]
})

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(8, 5))
sns.barplot(x='Category', y='Total', data=performance_data)
plt.show()

"""Output kode di atas memberikan informasi :
- Cellphones yang memiliki performance lebih dari lima ada 23
- Cellphones yang memiliki performance kurang dari lima ada 10

Menghitung jumlah main camera untuk masing-masing kategori.
"""

#Menghitung jumlah main camera
mainCamera_counts = data['main camera'].value_counts()
print(mainCamera_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=data, x=data['main camera'])
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat enam kategori main camera
- Kategori main camera 50 memiliki jumlah terbanyak dengan total 13
- Kategori main camera 13, 48, 108 memiliki jumlah tersedikit dengan total 2

Menghitung jumlah battery size.
"""

#Menghitung jumlah battery size
batterySize_counts = data['battery size'].value_counts()
print(batterySize_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(15, 3))
sns.countplot(data=data, x=data['battery size'])
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat 18 kategori battery size
- kategori battery size 5000 memiliki jumlah terbanyak dengan total 11

Menghitung jumlah screen size.
"""

#Menghitung jumlah screen size
screenSize_counts = data['screen size'].value_counts()
print(screenSize_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=data, x=data['screen size'])
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat sepuluh kategori screen size
- Kategori screen size 6.7 memiliki jumlah terbanyak dengan total 8

Menghitung jumlah weight.
"""

#Menghitung jumlah weight
weight_counts = data['weight'].value_counts()
print(len(weight_counts))
print(weight_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(15, 3))
sns.countplot(data=data, x=data['weight'])
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat 27 kategori weight
- Kategori weight 204 memiliki jumlah terbanyak dengan total 5

Melakukan analisis kolom release date dengan membagi data berdasarkan tahun.
"""

#Mengcopy dataset original
data_new = data.copy()

#Konversi kolom 'release date' ke tipe datetime
data_new['release date'] = pd.to_datetime(data['release date'], format='%d/%m/%Y')

# Ekstraksi tahun rilis
data_new['release_year'] = data_new['release date'].dt.year

# Hitung jumlah rilis per tahun
release_counts = data_new['release_year'].value_counts().sort_index()

print(release_counts)

#Menampilkan dalam bentuk grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=data, x=data_new['release_year'])
plt.show()

"""Output kode di atas memberikan informasi :
- Terdapat tiga kategori tahun
- Tahun 2021 dan 2022 memiliki jumlah terbanyak dengan total 16
- Tahun 2018 memiliki jumlah tersedikit dengan total 1

**Rating**

Mencari tahu masing-masing user melakukan review berapa kali dan mencari tahu apakah ada user yang melakukan jumlah review berbeda dari user lainnya.
"""

#Menghitung masing-masing user melakukan review berapa kali
user_review_counts = rating['user_id'].value_counts()
print(user_review_counts)

#Mencari nilai unik untuk mencari tahu apakah ada user yang memiliki nilai berbeda
print("\n",user_review_counts.unique())

"""Output kode di atas memberikan informasi :
- Masing-masing user melakukan review sebanyak sepuluh kali
- Semua user memiliki jumlah review yang sama yaitu sepuluh

Menghitung jumlah kemunculan cellphone yang diriview.
"""

#Menghitung cellphone dengan id X muncul berapa kali
cellphone_review_counts = rating['cellphone_id'].value_counts()
print("\nJumlah kemunculan per cellphone_id:\n", cellphone_review_counts.sort_index())

#Menghitung nilai minimum dan maximum
print("\nMinimum:", cellphone_review_counts.min())
print("Maximum:", cellphone_review_counts.max())

#Menampilkan grafik
plt.figure(figsize=(15, 3))
sns.countplot(data=rating, x=rating['cellphone_id'])
plt.show()

"""Output kode di atas memberikan informasi :
- Cellphone paling banyak direview sebanyak 41 kali
- Cellphone paling sedikit direview sebanyak 20 kali

Menghitung jumlah rating.
"""

#Menghitung rating X muncul berapa kali
rating_counts = rating['rating'].value_counts()
print("\nJumlah kemunculan per rating:\n", rating_counts.sort_index())

#Menampilkan grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=rating, x=rating['rating'])
plt.show()

"""Output kode di atas memberikan informasi :
- Rating memiliki skala 0 - 10
- Rating terbanyak dengan nilai 8
- Rating tersedikit dengan nilai 3
- Terdapat outliers yaitu rating dengan nilai 18

**User**
"""

#Menghitung age X muncul berapa kali
age_counts = users['age'].value_counts()
print("\nJumlah kemunculan age:\n", age_counts.sort_index())

#Menampilkan grafik
plt.figure(figsize=(10, 3))
sns.countplot(data=users, x=users['age'])
plt.show()

"""Output kode di atas memberikan informasi :
- Usia paling tua dari user adalah 61
- Usia paling muda dari user adalah 21
- User dengan usia 25 memiliki jumlah paling banyak yaitu 12

Menghitung jumlah masing-masing kategori gender.
"""

#Menghitung gender X muncul berapa kali
users_counts = users['gender'].value_counts()
print("\nJumlah kemunculan gender:\n", users_counts.sort_index())

#Menampilkan grafik
plt.figure(figsize=(5, 3))
sns.countplot(data=users, x=users['gender'])
plt.show()

"""Output kode di atas memberikan informasi :
- Gender female memiliki jumlah 46
- Gender male memiliki jumlah 50
- Terdapat outliers yaitu `-Select Gender-`

Menghitung jumlah occupation X muncul berapa kali.
"""

#Menghitung occupation X muncul berapa kali
occupation_counts = users['occupation'].str.lower().value_counts()
print('Jumlah occupation: ',len(occupation_counts))
print("\nJumlah kemunculan occupation:\n", occupation_counts.sort_index())

"""Output kode di atas memberikan informasi :
- Terdapat 45 jenis pekerjaan
- Terdapat kesalahan penulisan pada `healthare`
- Pekerjaan `information technology` dan `it` dapat dijadikan satu

#Data Preprocessing

Menggabungkan dataset data, rating, dan users menjadi satu.
"""

#Gabungkan cellphones_ratings dengan cellphones_data
ratings_data = pd.merge(rating, data, on='cellphone_id')

#Gabungkan hasil dengan cellphones_users
merged_data = pd.merge(ratings_data, users, on='user_id')

#Menampilkan dataset hasil merged
merged_data.head()

"""Melakukan cek missing value."""

#Cek missing value
merged_data.isnull().sum()

"""Output kode di atas memberikan informasi :
- Terdapat 10 missing value pada occupation

Menampilkan isi dari baris yang memiliki missing value.
"""

#Menampilkan baris yang memiliki nilai null
rows_with_null = merged_data[merged_data.isnull().any(axis=1)]
print(rows_with_null)

"""Output kode di atas memberikan informasi :
- Seperti yang ditemukan saat univariate analysis bahwa terdapat outlier pada kolom gender yaitu `-Select Gender-` yang ternyata berhubungan dengan nilai occupation NaN
- Akan dilakukan drop

Drop missing value.
"""

#Menghapus missing value
merged_data = merged_data.dropna()

"""Memastikan bahwa tidak terdapat missing value lagi."""

#Cek missing value
merged_data.isnull().sum()

"""Output kode di atas memberikan informasi :
- Sudah tidak terdapat missing value.

Berdasarkan univariate analysis terdapat outlier pada kolom rating, terdapat kesalahan tulis pada kolom occupation dan terdapat penyamaan nama pekerjaan pada kolom occupation.
"""

#Drop rating 18
merged_data = merged_data[merged_data['rating'] != 18]

#Mengubah seluruh value occupation menjadi lowercase
merged_data['occupation'] = merged_data['occupation'].str.lower()

#Mengubah value 'healthare' pada kolom "occupation" menjadi 'healthcare'
merged_data['occupation'] = merged_data['occupation'].replace('healthare', 'healthcare')

#Mengubah value 'it' pada kolom "occupation" menjadi 'information technology'
merged_data['occupation'] = merged_data['occupation'].replace('it', 'information technology')

"""Menampilkan dataset yang sudah dibersihkan."""

#Menampilkan dataset
cleaned_data = merged_data
cleaned_data

"""# Data Preparation

Menghapus data duplikat sehingga cellphone hanya muncul satu kali.
"""

#Menghapus data duplikat
cleaned_data = cleaned_data.drop_duplicates('cellphone_id')

"""Melakukan konversi data series menjadi list."""

#Melakukan konversi data series menjadi list
cellphone_id = cleaned_data['cellphone_id'].tolist()
brand = cleaned_data['brand'].tolist()
model = cleaned_data['model'].tolist()
operating_system = cleaned_data['operating system'].tolist()

print(len(cellphone_id))
print(len(brand))
print(len(model))
print(len(operating_system))

"""Membuat dictionary untuk menentukan pasangan key-value.

Karena TF-IDF hanya cocok untuk data teks maka hanya kolom yang bertipe object saja yang dipilih.
"""

#Membuat dictionary untuk menentukan pasangan key-value
phone_new = pd.DataFrame({
    'cellphone_id': cellphone_id,
    'brand': brand,
    'model': model,
    'operating_system': operating_system,
})

phone_new

"""#Model Development Dengan Content Based Filtering

Melakukan assign dataframe ke variabel baru yaitu data.
"""

#Assign dataframe phone_new ke variabel data
data = phone_new

"""Membangun sistem rekomendasi."""

#Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

#Melakukan perhitungan idf pada data brand
tf.fit(data['brand'])

#Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

"""Melakukan fit dan transformasi ke bentuk matriks."""

#Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['brand'])

#Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""Menghasilkan vektor TF-IDF dalam bentuk matriks."""

#Menghasilkan vektor TF-IDF dalam bentuk matriks.
tfidf_matrix.todense()

"""Melihat matriks TF-IDF untuk beberapa model dan brand."""

#Menampilkan matriks TF-IDF untuk beberapa model dan brand.
pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.model
).sample(10, axis=1).sample(10, axis=0)

"""Menghitung derajat kesamaan (similarity degree) antar model dengan teknik cosine similarity."""

#Menampilkan cosine_similatiry
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Matriks kesamaan setiap model dengan menampilkan nama model dalam 33 sampel kolom (axis = 1) dan 10 sampel baris (axis=0)."""

#Membuat dataframe dari variabel cosine_sim
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['model'], columns=data['model'])
print('Shape:', cosine_sim_df.shape)

#Melihat similarity matrix pada setiap resto
cosine_sim_df.sample(33, axis=1).sample(10, axis=0)

"""Membuat fungsi model_recommendations"""

def model_recommendations(model, similarity_data=cosine_sim_df, items=phone_new[['model','brand','operating_system']], k=4):
    #Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    #Dataframe diubah menjadi numpy
    #Range(start, stop, step)
    index = similarity_data.loc[:,model].to_numpy().argpartition(
        range(-1, -k, -1))

    #Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop nama_model agar nama model yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(model, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""Menampilkan hasil rekomendasi untuk `iPhone XR`"""

#Menampilkan hasil rekomendasi
model_recommendations('iPhone XR')

"""Menampilkan hasil rekomendasi untuk `Galaxy S22`"""

#Menampilkan hasil rekomendasi
model_recommendations('Galaxy S22')

"""# Model Model Development dengan Collaborative Filtering

Menyimpan dataset rating yang sudah pernah diread di variabel df.
"""

#Membaca dataset
df = rating
df

"""Menyandikan (encode) fitur user_id."""

#Mengubah user_id menjadi list tanpa nilai yang sama
user_ids = df['user_id'].unique().tolist()
print('list userID: ', user_ids)

#Melakukan encoding userID
user_to_user_encoded = {x: i for i, x in enumerate(user_ids)}
print('encoded userID : ', user_to_user_encoded)

#Melakukan proses encoding angka ke ke userID
user_encoded_to_user = {i: x for i, x in enumerate(user_ids)}
print('encoded angka ke userID: ', user_encoded_to_user)

"""Menyandikan (encode) fitur cellphone_id."""

#Mengubah cellphone_id menjadi list tanpa nilai yang sama
cellphone_ids = df['cellphone_id'].unique().tolist()

#Melakukan proses encoding cellphone_id
cellphone_to_cellphone_encoded = {x: i for i, x in enumerate(cellphone_ids)}

#Melakukan proses encoding angka ke cellphone_id
cellphone_encoded_to_cellphone = {i: x for i, x in enumerate(cellphone_ids)}

"""Mapping user_id dan cellphone_id."""

#Mapping user_id ke dataframe user
df['user'] = df['user_id'].map(user_to_user_encoded)

#Mapping cellphone_id ke dataframe cellphone
df['cellphone'] = df['cellphone_id'].map(cellphone_to_cellphone_encoded)

"""Menampilkan jumlah user dan cellphone.

Menampilkan nilai minimum dan maximum dari rating.
"""

#Mendapatkan jumlah user
num_users = len(user_to_user_encoded)
print(num_users)

#Mendapatkan jumlah cellphone
num_cellphone = len(cellphone_to_cellphone_encoded)
print(num_cellphone)

#Mengubah rating menjadi nilai float
df['rating'] = df['rating'].values.astype(np.float32)

#Nilai minimum rating
min_rating = min(df['rating'])

#Nilai maksimal rating
max_rating = max(df['rating'])

print('Number of User: {}, Number of cellphone: {}, Min Rating: {}, Max Rating: {}'.format(
    num_users, num_cellphone, min_rating, max_rating
))

"""Output kode di atas memberikan informasi :
- Terdapat outliers pada fitur rating yaitu value '18'
- Outlier tersebut harus di drop

Drop baris dengan value pada kolom rating 18.
"""

#Drop data
df = df[df['rating'] != 18]

"""Memastikan kembali tidak ada nilai max yang melebihi 10."""

#Nilai minimum rating
min_rating = min(df['rating'])

#Nilai maksimal rating
max_rating = max(df['rating'])

print('Min Rating: {}, Max Rating: {}'.format(
    min_rating, max_rating
))

"""Melakukan acak terhadap dataset."""

#Mengacak dataset
df = df.sample(frac=1, random_state=42)
df

"""Memetakan (mapping) data user dan cellphone menjadi satu value.

Mebagi data train dan validasi dengan komposisi 80:20.
"""

#Membuat variabel x untuk mencocokkan data user dan cellphone menjadi satu value
x = df[['user', 'cellphone']].values

#Membuat variabel y untuk membuat rating dari hasil
y = df['rating'].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values

#Membagi menjadi 80% data train dan 20% data validasi
train_indices = int(0.8 * df.shape[0])
x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:]
)

print(x, y)

"""Membuat class recommenderNet."""

import tensorflow as tf
class RecommenderNet(tf.keras.Model):

  # Insialisasi fungsi
  def __init__(self, num_users, num_cellphone, embedding_size, **kwargs):
    super(RecommenderNet, self).__init__(**kwargs)
    self.num_users = num_users
    self.num_cellphone = num_cellphone
    self.embedding_size = embedding_size
    self.user_embedding = layers.Embedding( # layer embedding user
        num_users,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.user_bias = layers.Embedding(num_users, 1) # layer embedding user bias
    self.cellphone_embedding = layers.Embedding( # layer embeddings cellphone
        num_cellphone,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.cellphone_bias = layers.Embedding(num_cellphone, 1) # layer embedding cellphone bias

  def call(self, inputs):
    user_vector = self.user_embedding(inputs[:,0]) # memanggil layer embedding 1
    user_bias = self.user_bias(inputs[:, 0]) # memanggil layer embedding 2
    cellphone_vector = self.cellphone_embedding(inputs[:, 1]) # memanggil layer embedding 3
    cellphone_bias = self.cellphone_bias(inputs[:, 1]) # memanggil layer embedding 4

    dot_user_cellphone = tf.tensordot(user_vector, cellphone_vector, 2)

    x = dot_user_cellphone + user_bias + cellphone_bias

    return tf.nn.sigmoid(x) # activation sigmoid

"""Melakukan inisialisasi model dan compile."""

model = RecommenderNet(num_users, num_cellphone, 50) #inisialisasi model

#model compile
model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.Adam(learning_rate=0.001),
    metrics=[tf.keras.metrics.RootMeanSquaredError()]
)

"""Melakukan training terhadap model."""

#Memulai training

history = model.fit(
    x = x_train,
    y = y_train,
    batch_size = 8,
    epochs = 100,
    validation_data = (x_val, y_val)
)

"""Menampilkan grafik proses training."""

#Menampilkan grafik traning vs test
plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('model_metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""Membuat variabel cellhpone_not_reviewed sebagai daftar cellphone untuk direkomendasikan pada pengguna."""

phone_df = phone_new
df = pd.read_csv('rating.csv')

#Mengambil sample user
user_id = df.user_id.sample(1).iloc[0]
cellphone_reviewed_by_user = df[df.user_id == user_id]

cellphone_not_reviewed = phone_df[~phone_df['cellphone_id'].isin(cellphone_reviewed_by_user.cellphone_id.values)]['cellphone_id']
cellphone_not_reviewed = list(
    set(cellphone_not_reviewed)
    .intersection(set(cellphone_to_cellphone_encoded.keys()))
)

cellphone_not_reviewed = [[cellphone_to_cellphone_encoded.get(x)] for x in cellphone_not_reviewed]
user_encoder = user_to_user_encoded.get(user_id)
user_cellphone_array = np.hstack(
    ([[user_encoder]] * len(cellphone_not_reviewed), cellphone_not_reviewed)
)

"""Meperoleh hasil rekomendasi cellphone."""

ratings = model.predict(user_cellphone_array).flatten()

top_ratings_indices = ratings.argsort()[-10:][::-1]
recommended_cellphone_ids = [
    cellphone_encoded_to_cellphone.get(cellphone_not_reviewed[x][0]) for x in top_ratings_indices
]

print('Showing recommendations for users: {}'.format(user_id))
print('===' * 9)
print('cellphone with high ratings from user')
print('----' * 8)

top_cellphone_user = (
    cellphone_reviewed_by_user.sort_values(
        by = 'rating',
        ascending=False
    )
    .head(5)
    .cellphone_id.values
)

cellphone_df_rows = phone_df[phone_df['cellphone_id'].isin(top_cellphone_user)]
for row in cellphone_df_rows.itertuples():
    print(row.brand, ':', row.model)

print('----' * 8)
print('Top 10 cellphone recommendation')
print('----' * 8)

recommended_cellphone = phone_df[phone_df['cellphone_id'].isin(recommended_cellphone_ids)]
for row in recommended_cellphone.itertuples():
    print(row.brand, ':', row.model)